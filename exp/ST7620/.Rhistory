item_seleccion
%>%
reglas.df2 <-  as(reglas_secuencias, "data.frame") %>%
as_tibble() %>%
tidyr::separate(col = rule, into = c('lhs', 'rhs'), sep = " => ", remove = TRUE)
item_seleccion<- reglas.df2[c(9,20,2,27),]
item_seleccion %>%
knitr::kable(caption = "Reglas seleccionadas",
booktabs=T,
longtable=T,
digits = 4) %>%
kable_styling(
position = "center",
latex_options = c("striped", "condensed","scale_down"),
full_width = FALSE)
reglas.df2 <-  as(reglas_secuencias, "data.frame") %>%
as_tibble() %>%
tidyr::separate(col = rule, into = c('lhs', 'rhs'), sep = " => ", remove = TRUE)
item_seleccion<- reglas.df2[c(9,20,2,27),]
item_seleccion %>%
kable(item_seleccion, "latex", longtable = T, booktabs = T) %>%
kable_styling(latex_options = c("repeat_header"), font_size = 7) %>%
landscape()
reglas.df2 <-  as(reglas_secuencias, "data.frame") %>%
as_tibble() %>%
tidyr::separate(col = rule, into = c('lhs', 'rhs'), sep = " => ", remove = TRUE)
item_seleccion<- reglas.df2[c(9,20,2,27),]
item_seleccion %>%
kable(longtable = T, booktabs = T) %>%
kable_styling(latex_options = c("repeat_header"), font_size = 7) %>%
landscape()
reglas.df2 <-  as(reglas_secuencias, "data.frame") %>%
as_tibble() %>%
tidyr::separate(col = rule, into = c('lhs', 'rhs'), sep = " => ", remove = TRUE)
item_seleccion<- reglas.df2[c(9,20,2,27),]
item_seleccion %>%
knitr::kable(caption = "Reglas de secuencias",
booktabs=T,
longtable=T,
digits = 4) %>%
kable_styling(latex_options = c("repeat_header"), font_size = 7, full_width = TRUE)
#%>% landscape()
View(item_seleccion)
knit_with_parameters('~/Maestria en Mineria de datos - UTN/5 - Mineria de datos/Trabajo Practico/Prueba/Prueba.Rmd', encoding = 'UTF-8')
item_seleccion %>%
knitr::kable(caption = "Reglas de secuencias",
booktabs=T,
longtable=T,
digits = 4) %>%
kable_styling(latex_options = c("repeat_header"), font_size = 7) %>%
landscape()
item_seleccion %>%
knitr::kable(caption = "Reglas de secuencias",
booktabs=T,
longtable=F,
digits = 4) %>%
kable_styling(latex_options = c("repeat_header"), font_size = 7) %>%
landscape()
reglas.df %>%
knitr::kable(caption = "Reglas de secuencias",
booktabs=T,
longtable=T,
digits = 2) %>%
kable_styling(font_size = 6,
latex_options = c("striped", "condensed"),
position = "center",
full_width = FALSE) %>% landscape()
write.csv(reglas.df, "reglas_asociacion.csv")
write.csv(reglas.df2, "reglas_secuencia.csv")
# Carga de datos asociacion
datos <- read.csv("C:/Users/Usuario/Desktop/capa_datos_unificada.csv")
View(datos)
# Carga de datos asociacion
datos <- read.csv("C:/Users/Usuario/Desktop/capa_datos_unificada.csv",encoding = "latin1")
View(datos)
# Carga de datos asociacion
datos <- read.csv("C:/Users/Usuario/Desktop/capa_datos_unificada.csv",encoding = "UTF-8")
View(datos)
View(datos)
library(fastDummies)
# Carga de datos asociacion
datos <- read.csv("C:/Users/Usuario/Desktop/capa_datos_unificada.csv",encoding = "UTF-8")
names(datos)
c(,"FECHA.INGRESO.AL.PROGRAMA","Nacionalidad","EDAD.ACTUAL","CÓDIGO","MANZANA.Y.LOTE","BARRIO",
"field_7","field_8","field_9","MÉTODO.INGRESO","CAMBIÓ.","MÉTODO.ACTUAL","FECHA.DE.CAMBIO",
"FECHA.ÚLTIMO.RETIRO","field_15","field_16","AÑO_INGRESO","lotes_codigo.lotes_fid",
"lotes_codigo.lotes_N_lote","lotes_codigo.lotes_N_manzana","lotes_codigo.lotes_N_barrio",
"lotes_codigo.lotes_observaciones", "N_BARRIO")
c("FECHA.INGRESO.AL.PROGRAMA","Nacionalidad","EDAD.ACTUAL","CÓDIGO","MANZANA.Y.LOTE","BARRIO",
"field_7","field_8","field_9","MÉTODO.INGRESO","CAMBIÓ.","MÉTODO.ACTUAL","FECHA.DE.CAMBIO",
"FECHA.ÚLTIMO.RETIRO","field_15","field_16","AÑO_INGRESO","lotes_codigo.lotes_fid",
"lotes_codigo.lotes_N_lote","lotes_codigo.lotes_N_manzana","lotes_codigo.lotes_N_barrio",
"lotes_codigo.lotes_observaciones", "N_BARRIO")
View(datos)
columnas_convertir <- c("Nacionalidad","field_7","field_8","field_9","MÉTODO.INGRESO","CAMBIÓ.","MÉTODO.ACTUAL",
"field_15","AÑO_INGRESO")
datos <- fastDummies::dummy_cols(datos, select_columns = columnas_convertir, remove_selected_columns=T)
View(datos)
write.csv(datos, "C:/Users/Usuario/Desktop/capa_datos_unificada_Renzo.csv",encoding = "UTF-8")
write.csv(datos, "C:/Users/Usuario/Desktop/capa_datos_unificada_Renzo.csv")
rep(seq(1:3, step=0.5), time=5)
rep(seq(1:3, step=0.5), time=5)
seq(1:3, step=0.5)
seq(1:3, step=0.5)
rep(seq(1:3, by=0.5), time=5)
seq(1:3, by=0.5)
seq(1:3, by=0.5)
seq(1,3, by=0.5)
rep(seq(1,3, by=0.5), time=5)
rep(1:2, each=5)
x=rep(1:3, each=3)
table(x)
unique(x)
x[0]
x[1]
x=1:5
x[c(1,5)]
x[(1,5)]
x[1,5]
x[c(1,5)]
x[c(1)]
x[c(1:3)]
x=[10,10,5,6,7]
x[ x == 10 ]
x=[10,10,5,6,7]
x[x==10]
y = x[x==10]
x[x==10]
x[x==11]
x[x==10]
x[x==6]
x[x!=6]
x[x>6]
x[x<6]
x=c(10,10,5,6,7)
x[x==10]
m<-c(T,F,F,T)
p<-c(T,F,T,F)
m&p
m|p
!m
m|p
clear
clear
x=c(2,5,7,8,3)
x=c(2,5,7,8,3)
mean(x)
median(x)
x=c(2,5,8,7,3)
mean(x)
median(x)
a=c(2,5,8,7,3)
mean(a)
median(a)
a = c(2,5,8,7,3)
b = a-mean(a)
mean(b)
a = c(1,0,3,7,11)
b = a-mean(a)
mean(b)
a = c(1,0,3,7,11)
b = a-mean(a)
mean(b)
mean(a)
b = a-mean(a)
mean(b)
a = c(1,0,3,7,11)
mean(a)
b = a-mean(a)
mean(b)
mean(b)
matriz = rbind(genero, desempleo)
# Mosaico
genero=c(30,70)
desempleo=c(20,80)
matriz = rbind(genero, desempleo)
mosaicplot(matriz)
# Mosaico
genero=c(30,70)
desempleo=c(20,80)
matriz = rbind(genero, desempleo)
colnames(matriz) <- c('desempleados',"empleados")
rownames(matriz) <- c('hombres',"mujeres")
mosaicplot(matriz)
# Mosaico
hombres=c(24,6)
mujeres=c(56,14)
genero = rbind(hombres, mujeres)
rownames(genero) <- c('hombres',"mujeres")
# Mosaico
hombres=c(24,6)
mujeres=c(56,14)
genero = rbind(hombres, mujeres)
colnames(genero) <- c('hombres',"mujeres")
genero
# Mosaico
hombres=c(24,6)
mujeres=c(56,14)
genero = rbind(hombres, mujeres)
colnames(genero) <- c('hombres',"mujeres")
# Mosaico
hombres=c(24,6)
mujeres=c(56,14)
genero = rbind(hombres, mujeres)
colnames(genero) <- c('hombres',"mujeres")
genero
# Mosaico
hombres=c(24,6)
mujeres=c(56,14)
genero = rbind(hombres, mujeres)
rownames(genero) <- c('hombres',"mujeres")
genero
colnames(genero) <- c('empleados',"desempleados")
genero
# Mosaico
hombres=c(24,6)
mujeres=c(56,14)
trabajo = rbind(hombres, mujeres)
# Mosaico
hombres=c(24,6)
mujeres=c(56,14)
trabajo = rbind(hombres, mujeres)
rownames(trabajo) <- c('hombres',"mujeres")
colnames(trabajo) <- c('empleados',"desempleados")
trabajo
mosaicplot(trabajo)
# Mosaico de variables dependientes
hombres=c(24,6)
mujeres=c(20,80)
trabajo = rbind(hombres, mujeres)
rownames(trabajo) <- c('Hombres',"Mujeres")
colnames(trabajo) <- c('Empleados',"Desempleados")
trabajo
mosaicplot(trabajo)
# Mosaico de variables dependientes
hombres=c(24,60)
mujeres=c(56,14)
trabajo = rbind(hombres, mujeres)
rownames(trabajo) <- c('Hombres',"Mujeres")
colnames(trabajo) <- c('Empleados',"Desempleados")
trabajo
mosaicplot(trabajo)
#
a=c(3,4,2)
b=c(1,7,1)
c=a*b
matriz=matrix(rbind(a,b,c))
matriz
matriz=matrix(a,b,c)
matriz
matriz = matrix(rbind(a,b,c),nrow = 3, ncol = 3))
matriz = matrix(rbind(a,b,c),nrow = 3)
matriz
eigen(matriz)
matriz = matrix(rbind(a,b,c),nrow = 3, byrow = F)
eigen(matriz)
#
a=c(3,4,2)
b=c(1,7,1)
c=a*b
matriz = matrix(rbind(a,b,c),nrow = 3, byrow = F)
eigen(matriz)
cov(matriz)
eigen(cov(matriz))
#
a=c(3,4,2)
b=c(1,7,1)
c=a*b
matriz = matrix(rbind(a,b,c),nrow = 3, byrow = F)
eigen(cov(matriz))
#
a=c(3,4,2)
b=c(1,7,1)
c=a*b
matriz = matrix(rbind(a,b,c),nrow = 3, byrow = F)
eigen(cov(matriz))
# Se calcula los autovalores de una matriz con un vector combinacion lineal
# de los otros. Al calcular el 3er autovalor da 0
a=c(3,4,2)
b=c(1,7,1)
c=a*b
matriz = matrix(rbind(a,b,c),nrow = 3, byrow = F)
eigen(cor(matriz))
I<- diag(8)
I
I*2
I <- I*2
eigen(I)
cor(I)
hombres=c(50,50)
mujeres=c(50,50)
trabajo = rbind(hombres, mujeres)
rownames(trabajo) <- c('Hombres',"Mujeres")
colnames(trabajo) <- c('Empleados',"Desempleados")
trabajo
mosaicplot(trabajo)
# Mosaico de variables independientes
hombres=c(24,6)
mujeres=c(56,14)
trabajo = rbind(hombres, mujeres)
rownames(trabajo) <- c('Hombres',"Mujeres")
colnames(trabajo) <- c('Empleados',"Desempleados")
trabajo
mosaicplot(trabajo)
# Mosaico de variables dependientes
hombres=c(24,60)
mujeres=c(56,14)
trabajo = rbind(hombres, mujeres)
rownames(trabajo) <- c('Hombres',"Mujeres")
colnames(trabajo) <- c('Empleados',"Desempleados")
trabajo
mosaicplot(trabajo)
#Promedio de desvios
a = c(1,0,3,7,11)
b = a-mean(a)
sum(b)
# Se calcula los autovalores de una matriz con un vector combinacion lineal
# de los otros. Al calcular el 3er autovalor da 0
a=c(3,4,2)
b=c(1,7,1)
c=a*b
matriz = matrix(rbind(a,b,c),nrow = 3, byrow = F)
eigen(cor(matriz))
I<- diag(8)
I <- I*2
cor
eigen(I)
I<- diag(8)
I <- I*2
eigen(I)
eigen(cor(I))
eigen(I)
I<- diag(8)
I <- I*2
eigen(I)
install.packages([readxl, ggplot2] )
install.packages(c("readxl", "ggplot2"))
install.packages(c("readxl", "ggplot2","ggrepel","plotrix","smacof", "UsingR","pgirmess","MASS","car"))
library(readxl) ##Permite leer archivos xlsx
library(ggplot2) ##Paquete para confeccionar dibujos
library(ggrepel) ##Paquete que manipula etiquetas para gráficos
library(plotrix) ##Paquete para gráficos requerido para la libreria smacof
library(smacof)  ##Paquete para MDS basado en la minimización del stress
library(UsingR)
library(pgirmess)#pruebas a posteriori de kruskal wallis
library(MASS)
library(car)
S1=c(3.3,4.4,4.9,4.9,3.9,4.2,4.7,5.1,4.6,4.5)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3)
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4)
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8)
supl=cbind(S1,S2,S3,S4)
efic=data.frame("Suplemento"=factor(c(rep(1,10),rep(2,10),rep(3,10),rep(4,10))),
"Eficiencia"=c(S1,S2,S3,S4))
efic
medias=apply(supl, mean)
medias=apply(supl, mean())
efic
GrupoA=c(25,36,36,25,36,16,25,36,49,36,25)
GrupoB=c(121,36,36,64,36,81,49,25,64,49,121)
GrupoC=c(81,81,36,9,25,36,9,49,169,1,81)
GrupoD=c(25,25,36,25,36,25,25,25,25,25,25)
Tiempos=cbind(GrupoA,GrupoB,GrupoC,GrupoD)
tiempo=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD))
tiempo
shapiro.test(tiempo$Tiempos~tiempo$Grupos)
shapiro.test(tiempo$Grupos~tiempo$Tiempos)
shapiro.test($Tiempos)
shapiro.test(tiempo$Tiempos)
GrupoA=c(25,36,36,25,36,16,25,36,49,36,25)
GrupoB=c(121,36,36,64,36,81,49,25,64,49,121)
GrupoC=c(81,81,36,9,25,36,9,49,169,1,81)
GrupoD=c(25,25,36,25,36,25,25,25,25,25,25)
Tiempos=cbind(GrupoA,GrupoB,GrupoC,GrupoD)
tiempo=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD))
#Calcular la media y el desvio de cada uno de los grupos
medias=apply(Tiempos,2,mean)
desvios=apply(Tiempos,2,sd)
salida=round(cbind(medias,desvios),3)
medias
desvios
salida
# Prueba ANOVA
Tiempo.anova = aov(Tiempos~Grupos, data=tiempo)
Tiempo.anova
summary(Tiempo.anova)
# No se puede rechazar antes de verificar los supuestos
# Se analizan si los residuos del modelo son normales
# Shapiro Test
shapiro.test(residuals(Tiempo.anova))
install.packages(c("Matrix", "Hmisc", "rlist", "yaml", "parallel", "primes", "bit64", "IRdisplay", "repr", "vioplot", "DT", "ROCR", "R.utils"))
install.packages(c("Rcpp", "devtools"))
install.packages(c("ggplot2", "gganimate", "transformr", "DiagrammeR"))
install.packages("data.table")
install.packages(c("rpart", "rpart.plot", "treeClust"))
install.packages(c("ranger", "randomForest"))
install.packages(c("xgboost", "lightgbm"))
install.packages(c("DiceKriging", "mlrMBO"))
install.packages( "data.table", dependencies= TRUE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
install.packages(c("readxl", "ggplot2","ggrepel","plotrix","smacof", "UsingR","pgirmess","MASS","car"))
R.version()
R.version()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
library(dplyr)
library(tidyr) # sane data munging
library(ggplot2) # needs no introduction
library(ggfortify) # super-helpful for plotting non-"standard" stats objects
library(ggbiplot)
setwd("C:/Users/Usuario/Documents/Maestria en Mineria de datos - UTN/8 - Aplicaciones de MDD a la Economía y Finanzas/labo/exp/ST7620")
dataset <- read.table("cluster_de_bajas.txt", header = TRUE, sep = "\t", dec = ".")
library(dplyr)
library(tidyr) # sane data munging
library(ggplot2) # needs no introduction
library(ggfortify) # super-helpful for plotting non-"standard" stats objects
library(ggbiplot)
setwd("C:/Users/Usuario/Documents/Maestria en Mineria de datos - UTN/8 - Aplicaciones de MDD a la Economía y Finanzas/labo/exp/ST7620")
dataset <- read.table("cluster_de_bajas.txt", header = TRUE, sep = "\t", dec = ".")
campos_buenos  <- c( "ctrx_quarter", "cpayroll_trx", "mcaja_ahorro", "mtarjeta_visa_consumo", "ctarjeta_visa_trx",
"mcuentas_saldo", "mrentabilidad_annual", "mprestamos_personales", "mactivos_margen", "mpayroll",
"Visa_mpagominimo", "Master_fechaalta", "cliente_edad", "chomebanking_trx", "Visa_msaldopesos",
"Visa_Fvencimiento", "mrentabilidad", "Visa_msaldototal", "Master_Fvencimiento", "mcuenta_corriente",
"Visa_mpagospesos", "Visa_fechaalta", "mcomisiones_mantenimiento", "Visa_mfinanciacion_limite",
"mtransferencias_recibidas", "cliente_antiguedad", "Visa_mconsumospesos", "Master_mfinanciacion_limite",
"mcaja_ahorro_dolares", "cproductos", "mcomisiones_otras", "thomebanking", "mcuenta_debitos_automaticos",
"mcomisiones", "Visa_cconsumos", "ccomisiones_otras", "Master_status", "mtransferencias_emitidas",
"mpagomiscuentas", "cluster2")
dataset2 <- dataset[-876,campos_buenos]
setwd("C:/Users/Usuario/Documents/Maestria en Mineria de datos - UTN/8 - Aplicaciones de MDD a la Economía y Finanzas/labo/exp/ST7620")
dataset <- read.table("cluster_de_bajas.txt", header = TRUE, sep = "\t", dec = ".")
campos_buenos  <- c( "ctrx_quarter", "cpayroll_trx", "mcaja_ahorro", "mtarjeta_visa_consumo", "ctarjeta_visa_trx",
"mcuentas_saldo", "mrentabilidad_annual", "mprestamos_personales", "mactivos_margen", "mpayroll",
"Visa_mpagominimo", "Master_fechaalta", "cliente_edad", "chomebanking_trx", "Visa_msaldopesos",
"Visa_Fvencimiento", "mrentabilidad", "Visa_msaldototal", "Master_Fvencimiento", "mcuenta_corriente",
"Visa_mpagospesos", "Visa_fechaalta", "mcomisiones_mantenimiento", "Visa_mfinanciacion_limite",
"mtransferencias_recibidas", "cliente_antiguedad", "Visa_mconsumospesos", "Master_mfinanciacion_limite",
"mcaja_ahorro_dolares", "cproductos", "mcomisiones_otras", "thomebanking", "mcuenta_debitos_automaticos",
"mcomisiones", "Visa_cconsumos", "ccomisiones_otras", "Master_status", "mtransferencias_emitidas",
"mpagomiscuentas", "cluster2")
dataset2 <- dataset[,campos_buenos]
View(dataset2)
###############################
data.pc = prcomp(dataset2[,-40], center = T, scale. = T)
ggbiplot(data.pc, choices = c(1,2), alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)# + geom_point(color=dataset2$cluster2)
ggbiplot(data.pc, choices = c(1,2), alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
ggbiplot(data.pc, choices = c(2,3), alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
plot(cumsum(pve), xlab="Principal Component", ylab="Cumulative Proportion of Variance Explained", ylim=c(0,1),type='b')
pca.var=pca$sdev^2
summary(data.pc)
# Grafico sin observaciones
ggbiplot(data.pc, choices = c(2,3), alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
# Grafico sin observaciones
ggbiplot(data.pc, choices = c(1,2), alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
pc = c(1,2)
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
pc = c(0,2) # Vector de componentes a analizar de a pares
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
pc = c(1,2) # Vector de componentes a analizar de a pares
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=0, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
summary(data.pc)
data.pc$rotation
data.pc$rotation['PC1']
View(data.pc)
data.pc[["rotation"]]
rotation <- data.pc[["rotation"]]
View(rotation)
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
pc <- c(1,2) # Vector de componentes a analizar de a pares
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=0, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=2, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
pc <- c(2,3) # Vector de componentes a analizar de a pares
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=2, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
pc <- c(3,4) # Vector de componentes a analizar de a pares
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=2, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
pc <- c(1,4) # Vector de componentes a analizar de a pares
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=2, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
pc <- c(1,2) # Vector de componentes a analizar de a pares
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=2, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
pc <- c(1,4) # Vector de componentes a analizar de a pares
pc <- c(2,4) # Vector de componentes a analizar de a pares
# Grafico con observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=4, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75) + geom_point(color=dataset2$cluster2)
# Grafico sin observaciones
ggbiplot(data.pc, choices = pc, alpha = 0, var.scale = 0, varname.size=2, varname.abbrev=F) + xlim(-0.75, 0.75) + ylim(-0.75, 0.75)
